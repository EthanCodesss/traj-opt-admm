PROJECT(admmCCD)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

#COMPILE SETTINGS
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/")
SET(CUDA_SEPARABLE_COMPILATION ON)
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  MESSAGE(STATUS "Build type: Debug")
  IF(MSVC)
    ADD_DEFINITIONS(-D_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj -Wall -std=c++11 ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O0 -Wall -fPIC -std=c++11 -Wno-unused-function -Wno-deprecated-declarations ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ELSE()
  MESSAGE(STATUS "Build type: Release")
  IF(MSVC)
    ADD_DEFINITIONS(-D_SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj -Wall -std=c++11 ${CMAKE_CXX_FLAGS}")
  ELSE(MSVC)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O3 -Wall -fPIC -std=c++11 -Wno-unused-function -Wno-deprecated-declarations ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ENDIF()
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})
#SET(CUDA_NVCC_FLAGS "-std=c++11")

#THIRD PARTY HEADERS
#ADD_DEFINITIONS(-DALL_TYPES)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
MACRO(SEARCH_SOURCE NAME DIRPRJ)
  FILE(GLOB_RECURSE header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.h ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hh)
  FILE(GLOB_RECURSE source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cc ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.c)
  FILE(GLOB_RECURSE cuda_source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cu)
ENDMACRO(SEARCH_SOURCE)

SEARCH_SOURCE(HighOrderCCD HighOrderCCD)
add_subdirectory(lib/opengjk)
include_directories(lib/opengjk/include)

#include_directories(/opt/intel/oneapi/mkl/latest/include/)

#link_directories(/opt/intel/oneapi/mkl/latest/lib/intel64/)

#LIBRARY
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/LoadLibs.cmake")


#BUILD LIBRARY
ADD_LIBRARY(admmCCD SHARED
    ${sourceHighOrderCCD} ${headerHighOrderCCD})
TARGET_LINK_LIBRARIES(admmCCD stdc++fs ${ALL_LIBRARIES} ${ALL_STATIC_LIBRARIES})# libmkl_rt.so



#EXE
MACRO(ADD_EXE NAME)
  ADD_EXECUTABLE(${NAME} Main/${NAME}.cpp)
  IF(MSVC)
      TARGET_LINK_LIBRARIES(${NAME} admmCCD ${ALL_STATIC_LIBRARIES})
  ELSE(MSVC)
      TARGET_LINK_LIBRARIES(${NAME} admmCCD gomp ${ALL_STATIC_LIBRARIES})
  ENDIF(MSVC)
  TARGET_LINK_LIBRARIES(${NAME} openGJKlib igl::core igl::opengl_glfw)#igl::core igl::opengl_glfw
ENDMACRO(ADD_EXE)

ADD_EXE(admmPathPlanning3D)
ADD_EXE(multiPathPlanning3D)

